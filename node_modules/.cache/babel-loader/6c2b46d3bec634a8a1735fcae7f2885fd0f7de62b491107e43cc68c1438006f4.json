{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const SoundContext=/*#__PURE__*/createContext();// creating the context of the sound to be globally available\nexport const SoundProvider=_ref=>{let{children}=_ref;const[isSoundOn,setIsSoundOn]=useState(true);// setting the value of isSoundOn to be true.. exports SoundProvider \nconst toggleSound=()=>{setIsSoundOn(prevState=>!prevState);};// function to toggleSound of the global button to be the opposite of its previous state\nreturn/*#__PURE__*/_jsx(SoundContext.Provider,{value:{isSoundOn,toggleSound},children:children});};/* Sound context has two properties, provider and consumer. SoundContext.Provider\r\npassing a prop of children (meaning everything that this tag wraps)\r\nand passing through the props of the state of isSoundOn and the function\r\ntoggleSound*/export const useSoundContext=()=>useContext(SoundContext);/* This exports a custom hook to consume the context value provided by\r\nSoundContext.Provider up above, eliminating need for useContext in\r\nGlobalButton*/","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","SoundContext","SoundProvider","_ref","children","isSoundOn","setIsSoundOn","toggleSound","prevState","Provider","value","useSoundContext"],"sources":["C:/Users/conne/Documents/GitHub/react-project/src/soundReact/SoundContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst SoundContext = createContext();\r\n\r\n// creating the context of the sound to be globally available\r\n\r\nexport const SoundProvider = ({ children }) => {\r\n  const [isSoundOn, setIsSoundOn] = useState(true);\r\n\r\n// setting the value of isSoundOn to be true.. exports SoundProvider \r\n\r\n  const toggleSound = () => {\r\n    setIsSoundOn(prevState => !prevState);\r\n  };\r\n\r\n  // function to toggleSound of the global button to be the opposite of its previous state\r\n\r\n  return (\r\n    <SoundContext.Provider value={{ isSoundOn, toggleSound }}>\r\n      {children}\r\n    </SoundContext.Provider>\r\n  );\r\n};\r\n\r\n/* Sound context has two properties, provider and consumer. SoundContext.Provider\r\npassing a prop of children (meaning everything that this tag wraps)\r\nand passing through the props of the state of isSoundOn and the function\r\ntoggleSound*/\r\n\r\nexport const useSoundContext = () => useContext(SoundContext);\r\n\r\n/* This exports a custom hook to consume the context value provided by\r\nSoundContext.Provider up above, eliminating need for useContext in\r\nGlobalButton*/\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEnE,KAAM,CAAAC,YAAY,cAAGL,aAAa,CAAC,CAAC,CAEpC;AAEA,MAAO,MAAM,CAAAM,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,SAAS,CAAEC,YAAY,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CAElD;AAEE,KAAM,CAAAS,WAAW,CAAGA,CAAA,GAAM,CACxBD,YAAY,CAACE,SAAS,EAAI,CAACA,SAAS,CAAC,CACvC,CAAC,CAED;AAEA,mBACER,IAAA,CAACC,YAAY,CAACQ,QAAQ,EAACC,KAAK,CAAE,CAAEL,SAAS,CAAEE,WAAY,CAAE,CAAAH,QAAA,CACtDA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED;AACA;AACA;AACA,aAEA,MAAO,MAAM,CAAAO,eAAe,CAAGA,CAAA,GAAMd,UAAU,CAACI,YAAY,CAAC,CAE7D;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}