{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\conne\\\\Documents\\\\GitHub\\\\react-project\\\\src\\\\components\\\\Postcard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Card from \"@mui/joy/Card\";\nimport CardContent from \"@mui/joy/CardContent\";\nimport Link from \"@mui/joy/Link\";\nimport Input from \"@mui/joy/Input\";\nimport CustomButton from \"../soundReact/customButton\";\n\n// Import startements\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Postcard({\n  type,\n  cardId,\n  setCommentsArray,\n  setShowPostcard,\n  setShowAskQuestion\n})\n// Declares a functional component named 'Postcard' that accepts 5 props and returns JSX to render a card for posting comments\n\n{\n  _s();\n  const [comment, setComment] = useState(\"\");\n  const [commentsList, setCommentsList] = useState([]);\n\n  // These are state hooks; defining a state variable of comment and a function setComment, initial value is an empty string\n\n  const handlePostQuestionClick = () => {\n    if (comment.trim() === \"\") {\n      // This is the event handler, a function called when user clicks Post button, checks if comment is not empty...\n\n      return;\n    }\n    const storedComments = localStorage.getItem(\"commentsArray\");\n    const commentsArray = storedComments ? JSON.parse(storedComments) : [];\n    const newComment = {\n      id: commentsList.length + 1,\n      type: type,\n      text: comment,\n      cardId: commentsArray.length + 1\n    };\n\n    // will return object newComment\n\n    localStorage.setItem(\"commentsArray\", JSON.stringify([newComment, ...commentsArray]));\n\n    // Putting the commentsArray into local storage and creating a newComment to be placed in front of the exisiting commentsArray\n\n    setCommentsList([newComment, ...commentsList]);\n    setComment(\"\");\n    setCommentsArray(prevComments => [newComment, ...prevComments]);\n    setShowPostcard(false);\n    setShowAskQuestion(true);\n  };\n\n  // Updates commentsList, resets comment, adds new comment to commentsArray and updates state to show and hide postcard\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    variant: \"outlined\",\n    sx: {\n      width: \"300px\",\n      border: \"2px solid black\",\n      borderRadius: \"15px\",\n      \"--Card-radius\": theme => theme.vars.radius.xs\n    },\n    children: [/*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        component: \"button\",\n        underline: \"none\",\n        fontSize: \"md\",\n        fontWeight: \"lg\",\n        textColor: \"text.primary\",\n        children: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), commentsList.map(commentItem => /*#__PURE__*/_jsxDEV(CardContent, {\n      sx: {\n        border: \"2px solid #A8512F\",\n        borderRadius: \"10px\",\n        padding: \"8px\",\n        fontSize: \"sm\"\n      },\n      children: commentItem.text\n    }, commentItem.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(CardContent, {\n      orientation: \"horizontal\",\n      sx: {\n        gap: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        variant: \"plain\",\n        size: \"sm\",\n        placeholder: \"Ask a question!\",\n        value: comment,\n        onChange: e => setComment(e.target.value),\n        sx: {\n          flex: 1,\n          px: 0,\n          \"--Input-focusedThickness\": \"0px\",\n          border: \"2px solid #233349\",\n          borderRadius: \"5px\",\n          padding: \"5px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n        onClick: handlePostQuestionClick,\n        variant: \"Post\",\n        underline: \"none\",\n        role: \"button\",\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(Postcard, \"yjWjt92Gw/1tLpX0ZMJGgbDyb2E=\");\n_c = Postcard;\nvar _c;\n$RefreshReg$(_c, \"Postcard\");","map":{"version":3,"names":["React","useState","Card","CardContent","Link","Input","CustomButton","jsxDEV","_jsxDEV","Postcard","type","cardId","setCommentsArray","setShowPostcard","setShowAskQuestion","_s","comment","setComment","commentsList","setCommentsList","handlePostQuestionClick","trim","storedComments","localStorage","getItem","commentsArray","JSON","parse","newComment","id","length","text","setItem","stringify","prevComments","variant","sx","width","border","borderRadius","theme","vars","radius","xs","children","component","underline","fontSize","fontWeight","textColor","fileName","_jsxFileName","lineNumber","columnNumber","map","commentItem","padding","orientation","gap","size","placeholder","value","onChange","e","target","flex","px","onClick","role","_c","$RefreshReg$"],"sources":["C:/Users/conne/Documents/GitHub/react-project/src/components/Postcard.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Card from \"@mui/joy/Card\";\r\nimport CardContent from \"@mui/joy/CardContent\";\r\nimport Link from \"@mui/joy/Link\";\r\nimport Input from \"@mui/joy/Input\";\r\nimport CustomButton from \"../soundReact/customButton\";\r\n\r\n// Import startements\r\n\r\nexport default function Postcard({\r\n  type,\r\n  cardId,\r\n  setCommentsArray,\r\n  setShowPostcard,\r\n  setShowAskQuestion,\r\n}) \r\n\r\n// Declares a functional component named 'Postcard' that accepts 5 props and returns JSX to render a card for posting comments\r\n\r\n{\r\n  const [comment, setComment] = useState(\"\");\r\n  const [commentsList, setCommentsList] = useState([]);\r\n\r\n// These are state hooks; defining a state variable of comment and a function setComment, initial value is an empty string\r\n\r\n  const handlePostQuestionClick = () => {\r\n    if (comment.trim() === \"\") {\r\n     \r\n// This is the event handler, a function called when user clicks Post button, checks if comment is not empty...\r\n\r\n      return;\r\n    }\r\n    const storedComments = localStorage.getItem(\"commentsArray\");\r\n    const commentsArray = storedComments ? JSON.parse(storedComments) : [];\r\n\r\n    const newComment = {\r\n      id: commentsList.length + 1,\r\n      type: type,\r\n      text: comment,\r\n      cardId: commentsArray.length + 1,\r\n    };\r\n\r\n// will return object newComment\r\n   \r\n    localStorage.setItem(\r\n      \"commentsArray\",\r\n      JSON.stringify([newComment, ...commentsArray])\r\n    );\r\n    \r\n// Putting the commentsArray into local storage and creating a newComment to be placed in front of the exisiting commentsArray\r\n\r\n    setCommentsList([newComment, ...commentsList]);\r\n    setComment(\"\");\r\n    setCommentsArray((prevComments) => [newComment, ...prevComments]);\r\n    setShowPostcard(false);\r\n    setShowAskQuestion(true);\r\n  };\r\n\r\n  // Updates commentsList, resets comment, adds new comment to commentsArray and updates state to show and hide postcard\r\n\r\n  return (\r\n    <Card\r\n      variant=\"outlined\"\r\n      sx={{\r\n        width: \"300px\",\r\n        border: \"2px solid black\",\r\n        borderRadius: \"15px\",\r\n        \"--Card-radius\": (theme) => theme.vars.radius.xs,\r\n      }}\r\n    >\r\n      <CardContent>\r\n        <Link\r\n          component=\"button\"\r\n          underline=\"none\"\r\n          fontSize=\"md\"\r\n          fontWeight=\"lg\"\r\n          textColor=\"text.primary\"\r\n        >\r\n          {type}\r\n        </Link>\r\n      </CardContent>\r\n      {commentsList.map((commentItem) => (\r\n        <CardContent\r\n          key={commentItem.id}\r\n          sx={{\r\n            border: \"2px solid #A8512F\",\r\n            borderRadius: \"10px\",\r\n            padding: \"8px\",\r\n            fontSize: \"sm\",\r\n          }}\r\n        >\r\n          {commentItem.text}\r\n        </CardContent>\r\n      ))}\r\n      <CardContent orientation=\"horizontal\" sx={{ gap: 1 }}>\r\n        <Input\r\n          variant=\"plain\"\r\n          size=\"sm\"\r\n          placeholder=\"Ask a question!\"\r\n          value={comment}\r\n          onChange={(e) => setComment(e.target.value)}\r\n          sx={{\r\n            flex: 1,\r\n            px: 0,\r\n            \"--Input-focusedThickness\": \"0px\",\r\n            border: \"2px solid #233349\",\r\n            borderRadius: \"5px\",\r\n            padding: \"5px\",\r\n          }}\r\n        />\r\n        <CustomButton onClick={handlePostQuestionClick} \r\n        variant={\"Post\"}\r\n        underline=\"none\" \r\n        role=\"button\">\r\n          Post\r\n        </CustomButton>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}