{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\conne\\\\Documents\\\\GitHub\\\\react-project\\\\src\\\\soundReact\\\\SoundContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SoundContext = /*#__PURE__*/createContext();\n\n// creating the context of the sound to be globally available\n\nexport const SoundProvider = ({\n  children\n}) => {\n  _s();\n  const [isSoundOn, setIsSoundOn] = useState(true);\n\n  // setting the value of isSoundOn to be true \n\n  const toggleSound = () => {\n    setIsSoundOn(prevState => !prevState);\n  };\n\n  // function to toggleSound of the global button to be the opposite of its previous state\n\n  return /*#__PURE__*/_jsxDEV(SoundContext.Provider, {\n    value: {\n      isSoundOn,\n      toggleSound\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n/* Sound context has two properties, provider and consumer. SoundContext.Provider\r\npassing a prop of children (meaning everything that this tag wraps)\r\nand passing through the props of the state of isSoundOn and the function\r\ntoggleSound*/\n_s(SoundProvider, \"6/fzkuVmze839fZiqHSEjQf3wlY=\");\n_c = SoundProvider;\nexport const useSoundContext = () => {\n  _s2();\n  return useContext(SoundContext);\n};\n\n/* This exports a custom hook to consume the context value provided by\r\nSoundContext.Provider up above, eliminating need for useContext in\r\nGlobalButton*/\n_s2(useSoundContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"SoundProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","SoundContext","SoundProvider","children","_s","isSoundOn","setIsSoundOn","toggleSound","prevState","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSoundContext","_s2","$RefreshReg$"],"sources":["C:/Users/conne/Documents/GitHub/react-project/src/soundReact/SoundContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst SoundContext = createContext();\r\n\r\n// creating the context of the sound to be globally available\r\n\r\nexport const SoundProvider = ({ children }) => {\r\n  const [isSoundOn, setIsSoundOn] = useState(true);\r\n\r\n// setting the value of isSoundOn to be true \r\n\r\n  const toggleSound = () => {\r\n    setIsSoundOn(prevState => !prevState);\r\n  };\r\n\r\n  // function to toggleSound of the global button to be the opposite of its previous state\r\n\r\n  return (\r\n    <SoundContext.Provider value={{ isSoundOn, toggleSound }}>\r\n      {children}\r\n    </SoundContext.Provider>\r\n  );\r\n};\r\n\r\n/* Sound context has two properties, provider and consumer. SoundContext.Provider\r\npassing a prop of children (meaning everything that this tag wraps)\r\nand passing through the props of the state of isSoundOn and the function\r\ntoggleSound*/\r\n\r\nexport const useSoundContext = () => useContext(SoundContext);\r\n\r\n/* This exports a custom hook to consume the context value provided by\r\nSoundContext.Provider up above, eliminating need for useContext in\r\nGlobalButton*/\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;;AAEpC;;AAEA,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;;EAElD;;EAEE,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACxBD,YAAY,CAACE,SAAS,IAAI,CAACA,SAAS,CAAC;EACvC,CAAC;;EAED;;EAEA,oBACER,OAAA,CAACC,YAAY,CAACQ,QAAQ;IAACC,KAAK,EAAE;MAAEL,SAAS;MAAEE;IAAY,CAAE;IAAAJ,QAAA,EACtDA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AACA;AACA;AACA;AAHAV,EAAA,CAlBaF,aAAa;AAAAa,EAAA,GAAbb,aAAa;AAuB1B,OAAO,MAAMc,eAAe,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMpB,UAAU,CAACI,YAAY,CAAC;AAAA;;AAE7D;AACA;AACA;AAFAgB,GAAA,CAFaD,eAAe;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}